model dinamico_coches

enum TipoRevision {reparacion, mantenimiento}

class Ciudad
    attributes
        Nombre: String
end

class Clock
    attributes
        NOW : Integer init = 0
        resolution: Integer init = 1
    operations
        tick()
            begin
                self.NOW := self.NOW + self.resolution;
                for o in self.ao do
                    o.tick();
                end;
            end
            post TimePasses: self.NOW = self.NOW@pre + self.resolution
        run (t:Integer)
            begin
                for i in Sequence{1..t} do
                    self.tick();
                end
            end
    constraints
        inv PositiveResolution: self.resolution > 0
end

abstract class ActiveObject -- real-time objects 
  operations
    tick() begin end 
end

association Time between
    Clock[1] role clock
    ActiveObject[*] role ao ordered
end

class Coche < ActiveObject
    attributes
        fechaMatriculacion: Integer
        posicion : Real init: 0
        velocidad: Real
        kilometrosRecorridos : Real derive : 
            self.viajes->collect(v|v.recorrido.distancia)->sum()
        enGarantia : Boolean derive : -- pillar el taller oficial con la garantia + fecha de fin de revision mas alta
            self.clock.NOW - self.fechaMatriculacion < 400 
            or self.revisiones->select(r | r.fechaFin + r.taller.garantia > self.clock.NOW)->size() > 0
        necesitaMantenimiento : Boolean derive :
             not (self.clock.NOW - self.fechaMatriculacion < 400)
             and not (self.revisiones->select(r | r.tipo = TipoRevision::mantenimiento and self.clock.NOW - r.fechaFin <= 100)->size() > 0)
    operations
        avanzar() 
            begin
                if self.posicion + self.velocidad >= self.viajes->sortedBy(v | v.fechaSalida)->last().recorrido.distancia then
                    self.viajes->sortedBy(v | v.fechaSalida)->last().fechaLlegada := self.clock.NOW;
                    self.kilometrosRecorridos := self.kilometrosRecorridos + self.viajes->sortedBy(v | v.fechaSalida)->last().recorrido.distancia - self.posicion;
                    self.posicion := self.viajes->sortedBy(v | v.fechaSalida)->last().recorrido.distancia;
                else 
                    self.posicion := self.posicion + self.velocidad;
                    self.kilometrosRecorridos := self.kilometrosRecorridos + self.velocidad;
                end
            end
            pre estaViajando : self.viajes->sortedBy(v | v.fechaSalida)->last().fechaLlegada.isUndefined()
        empezarViaje(valor:Recorrido)
            begin
                declare newViaje : Viaje;
                newViaje := new Viaje();
                newViaje.fechaSalida := self.clock.NOW;
                insert (newViaje, valor) into ViajeRecorrido;
                insert (self,newViaje) into CocheViaje;
            end
            pre NoEstaViajando: not self.viajes->sortedBy(v | v.fechaSalida)->last().fechaLlegada.isUndefined()
            pre EstaEnCiudad: self.viajes->isEmpty() or self.viajes->sortedBy(v | v.fechaSalida)->last().recorrido.ciudadDestino = valor.ciudadOrigen
        --terminarViaje(valor: Viaje)
          --  begin
            -- // TODO: Ver si hace falta este mÃ©todo.    
          --  end
        tick()
            begin
                if self.viajes->sortedBy(v | v.fechaSalida)->last().fechaLlegada.isUndefined() then
                    self.avanzar();
                end
            end
end

associationclass Recorrido between
        Ciudad[1..1] role ciudadOrigen --- por ver si es 1..*
        Ciudad[1..1] role ciudadDestino --- por ver si es 1..*
    attributes
        distancia: Real
end

class Viaje
    attributes
        fechaSalida: Integer
        fechaLlegada: Integer    
end

class Taller
    attributes
        oficial: Boolean
        garantia: Integer
    operations
    --realizarRevision()
        --pre: not self.revisiones.isEmpty()
       -- begin
         -- if Clock.NOW > (self.revisiones.sortedBy(v | v.fechaInicio)->first().fechaFin) then
                
        --end
    end

class Revision
    attributes
        tipo: TipoRevision
        fechaInicio: Integer
        fechaFin: Integer
end

association CiudadTaller between
    Ciudad[1..1] role Ciudad
    Taller[0..*] role talleres
end

association RevisionCoche between
    Coche[1..1] role coche
    Revision[0..*] role revisiones
end

association RevisionTaller between
    Taller[1..1] role taller
    Revision[0..*] role revisiones
end

association CocheViaje between
    Coche[1..1] role coche
    Viaje[0..*] role viajes
end

association ViajeRecorrido between 
    Viaje[0..*] role viajes
    Recorrido[1..1] role recorrido   
end

constraints

context Recorrido
    inv distanciaMinima5km: 
        self.distancia > 5

context Revision
    inv fechaInicioMenorFechaFin: 
        self.fechaInicio < self.fechaFin
    inv fechaInicioPosteriorAMatriculaCoche: 
        self.fechaInicio > self.coche.fechaMatriculacion

context Coche
    inv fechasDeRevisionesNoSeSolapan: 
        self.revisiones->forAll(r1, r2 | r1 <> r2 implies r1.fechaInicio > r2.fechaFin or r1.fechaFin < r2.fechaInicio)
    inv siCocheActualmenteEnRevisionDebeEstarEnCiuadDeTaller:
        self.revisiones->select(r | r.fechaInicio < self.clock.NOW and r.fechaFin > self.clock.NOW)->asSequence()->first().taller
         = self.viajes->select(v | v.fechaLlegada < self.clock.NOW)->sortedBy(v | v.fechaLlegada)->last().recorrido.ciudadDestino
        and not (self.viajes->sortedBy(v | v.fechaSalida)->last().fechaLlegada.isUndefined())
    inv viajesNoPuedenSolaparse: 
        self.viajes->forAll(v1, v2 | v1 <> v2 implies v1.fechaSalida >= v2.fechaLlegada or v1.fechaLlegada <= v2.fechaSalida)
    inv origenDeViajeDebeSerDestinoDeViajeAnterior: 
        self.viajes->sortedBy(v | v.fechaSalida)->forAll(v1 | self.viajes->select(v2 | v2.fechaSalida >= v1.fechaLlegada)->sortedBy(v | v.fechaSalida)->first().recorrido.ciudadOrigen = v1.recorrido.ciudadDestino)

    
context Taller
    inv garantiaOficial: not self.oficial implies self.garantia = 0

context Ciudad
    inv unUnicoTallerOficial: self.talleres->select(t | t.oficial)->size() <= 1