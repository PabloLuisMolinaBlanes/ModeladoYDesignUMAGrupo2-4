model dinamico_coches

enum TipoRevision {mantenimiento, reparacion}

class Clock
    attributes
        tiempoActual : Integer
end

abstract class ActiveObject -- real-time objects 
  operations
    tick() begin end 
end

class Coche < ActiveObject
    attributes
        fechaMatriculacion : Integer
        kilometrosReccoridos : Real derive : 
            self.viajes->collect(v|v.recorrido.distancia)->sum()
        enGarantia : Boolean derive : -- pillar el taller oficial con la garantia + fecha de fin de revision mas alta
            self.clock.tiempoActual - self.fechaMatriculacion < 400 
            or self.revisiones->select(r | r.fechaFin + r.taller.garantia > self.clock.tiempoActual)->size() > 0

        necesitaMantenimiento : Boolean derive :
             not (self.clock.tiempoActual - self.fechaMatriculacion < 400)
             and not (self.revisiones->select(r | r.tipo = TipoRevision::mantenimiento and self.clock.tiempoActual - r.fechaFin <= 100)->size() > 0)
end

class Ciudad
    attributes
        nombre: String
end

associationclass Recorrido between
        Ciudad[0..*] role ciudadOrigen --- por ver si es 1..*
        Ciudad[0..*] role ciudadDestino --- por ver si es 1..*
    attributes
        distancia: Real
end

class Viaje
    attributes
        fechaSalida: Integer
        fechaLlegada: Integer 
    
end

class Taller
    attributes
        oficial : Boolean
        garantia : Integer
end

class Revision
    attributes
        tipo: TipoRevision
        fechaInicio: Integer
        fechaFin: Integer
end

association Time between 
  Clock [1] role clock
  ActiveObject [*] role ao ordered
end

association CiudadTaller between
    Ciudad[1..1] role Ciudad
    Taller[0..*] role talleres
end

association RevisionCoche between
    Coche[1..1] role coche
    Revision[0..*] role revisiones
end

association RevisionTaller between
    Taller[1..1] role taller
    Revision[0..*] role revisiones
end

association CocheViaje between
    Coche[1..1] role coche
    Viaje[0..*] role viajes
end

association ViajeRecorrido between 
    Viaje[0..*] role viajes
    Recorrido[1..1] role recorrido   
end


constraints

context Recorrido
    inv distanciaMinima5km: 
        self.distancia > 5

context Revision
    inv fechaInicioMenorFechaFin: 
        self.fechaInicio < self.fechaFin
    inv fechaInicioPosteriorAMatriculaCoche: 
        self.fechaInicio > self.coche.fechaMatriculacion

context Coche
    inv fechasDeRevisionesNoSeSolapan: 
        self.revisiones->forAll(r1, r2 | r1 <> r2 implies r1.fechaInicio > r2.fechaFin or r1.fechaFin < r2.fechaInicio)
    inv siCocheActualmenteEnRevisionDebeEstarEnCiuadDeTaller:
        self.revisiones->select(r | r.fechaInicio < self.clock.tiempoActual and r.fechaFin > self.clock.tiempoActual)->asSequence()->first().taller
         = self.viajes->select(v | v.fechaLlegada < self.clock.tiempoActual)->sortedBy(v | v.fechaLlegada)->last().recorrido.ciudadDestino
        and not (self.viajes->sortedBy(v | v.fechaSalida)->last().fechaLlegada.isUndefined())
    inv viajesNoPuedenSolaparse: 
        self.viajes->forAll(v1, v2 | v1 <> v2 implies v1.fechaSalida >= v2.fechaLlegada or v1.fechaLlegada <= v2.fechaSalida)
    inv origenDeViajeDebeSerDestinoDeViajeAnterior: 
        self.viajes->sortedBy(v | v.fechaSalida)->forAll(v1 | self.viajes->select(v2 | v2.fechaSalida >= v1.fechaLlegada)->sortedBy(v | v.fechaSalida)->first().recorrido.ciudadOrigen = v1.recorrido.ciudadDestino)

    
context Taller
    inv garantiaOficial: not self.oficial implies self.garantia = 0

context Ciudad
    inv unUnicoTallerOficial: self.talleres->select(t | t.oficial)->size() <= 1